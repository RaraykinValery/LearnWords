#!/usr/bin/env python3.10
import argparse
import os
import sqlite3
import signal


def main():
    parser = argparse.ArgumentParser(
        description="LearnWords is a programm to help you learn words easy!"
    )
    subparsers = parser.add_subparsers()
    parser.set_defaults(func=greetings)

    parser_add = subparsers.add_parser("add")
    parser_add.add_argument("text", type=str)
    parser_add.add_argument("translation", type=str)
    parser_add.set_defaults(func=add)

    parser_learn = subparsers.add_parser("learn")
    parser_learn.set_defaults(func=learn)

    args = parser.parse_args()
    args.func(args)


def add(args):
    try:
        with sqlite3.connect("db.sqlite3") as connection:
            connection.execute(
                "INSERT INTO dictionary (primary_text, translation) VALUES(?, ?)",
                [args.text, args.translation],
            )
    except sqlite3.IntegrityError as err:
        print(f"Couldn't add translation.\nError: {err}")
    else:
        print(f"Translation is added!")


def learn(args):
    GREEN = "\033[92m"
    BLUE = "\033[94m"
    RESET = "\033[0m"
    while True:
        try:
            with sqlite3.connect("db.sqlite3") as connection:
                row = connection.execute(
                    "SELECT primary_text, translation FROM dictionary ORDER BY RANDOM() LIMIT 1"
                ).fetchone()
        except sqlite3.IntegrityError as err:
            print(f"Couldn't add translation.\nError: {err}")
        else:
            primary_text = row[0]
            translation = row[1]
            os.system("clear" if os.name == "posix" else "cls")
            print(f"\n{primary_text}\n")
            input(f"{BLUE}Hit Enter to to continue, Ctrl-c to exit{RESET}")
            os.system("clear" if os.name == "posix" else "cls")
            print(f"\n{GREEN}{translation}{RESET}\n")
            input(f"{BLUE}Hit Enter to to continue, Ctrl-c to exit{RESET}")


def handler(signum, frame):
    os.system("clear" if os.name == "posix" else "cls")
    print("See you soon!")
    exit()


def greetings(args):
    print("WELCOME to LearnWords!\n" "To read help use -h or --help options\n")


if __name__ == "__main__":
    signal.signal(signal.SIGINT, handler)

    main()
